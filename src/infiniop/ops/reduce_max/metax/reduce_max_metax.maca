#include "../../../devices/metax/metax_common.h"
#include "reduce_max_metax.h"

#include <hccub/block/block_reduce.cuh>
#include "../../../devices/metax/metax_kernel_common.h"

#include "../../../reduce/cuda/reduce.cuh"

#include "../nvidia/kernel.cuh"

template <unsigned int BLOCK_SIZE, typename Tdata, typename Tcompute>
INFINIOP_METAX_KERNEL ReduceMax(
    Tdata *output_, const Tdata *input_,
    size_t batch, size_t height, size_t width,
    ptrdiff_t output_stride_b, ptrdiff_t output_stride_h,
    ptrdiff_t input_stride_b, ptrdiff_t input_stride_h, ptrdiff_t input_stride_w) {
    ReduceMaxKernel<BLOCK_SIZE, Tdata, Tcompute>(output_, input_, batch, height, width, output_stride_b, output_stride_h, input_stride_b, input_stride_h, input_stride_w);
}

namespace op::reduce_max::metax {

struct Descriptor::Opaque {
    std::shared_ptr<device::metax::Handle::Internal> internal;
};

Descriptor::~Descriptor() {
    delete _opaque;
}

infiniStatus_t Descriptor::create(
    infiniopHandle_t handle,
    Descriptor **desc_ptr,
    infiniopTensorDescriptor_t output_desc,
    infiniopTensorDescriptor_t input_desc,
    size_t dim) {
    auto info = ReduceMaxInfo::create(output_desc, input_desc, dim);
    CHECK_RESULT(info);
    *desc_ptr = new Descriptor(
        new Opaque{reinterpret_cast<device::metax::Handle *>(handle)->internal()},
        info.take(), 0, handle->device, handle->device_id);
    return INFINI_STATUS_SUCCESS;
}

template <unsigned int BLOCK_SIZE>
infiniStatus_t launchKernel(void *output, const void *input, infiniDtype_t dtype,
                            size_t batch_size, size_t height, size_t width,
                            ptrdiff_t output_stride_b, ptrdiff_t output_stride_h,
                            ptrdiff_t input_stride_b, ptrdiff_t input_stride_h, ptrdiff_t input_stride_w, 
                            hcStream_t stream) {
    dim3 grid(uint32_t(batch_size), uint32_t(height), 1);
    if (dtype == INFINI_DTYPE_F16) {
        ReduceMax<BLOCK_SIZE, half, float>
            <<<grid, BLOCK_SIZE, 0, stream>>>((half *)output, (const half *)input,
                                              batch_size, height, width,
                                              output_stride_b, output_stride_h,
                                              input_stride_b, input_stride_h, input_stride_w);
    } else if (dtype == INFINI_DTYPE_BF16) {
        ReduceMax<BLOCK_SIZE, __hpcc_bfloat16, float>
            <<<grid, BLOCK_SIZE, 0, stream>>>((__hpcc_bfloat16 *)output, (const __hpcc_bfloat16 *)input,
                                              batch_size, height, width,
                                              output_stride_b, output_stride_h,
                                              input_stride_b, input_stride_h, input_stride_w);
    } else if (dtype == INFINI_DTYPE_F32) {
        ReduceMax<BLOCK_SIZE, float, float>
            <<<grid, BLOCK_SIZE, 0, stream>>>((float *)output, (const float *)input,
                                              batch_size, height, width,
                                              output_stride_b, output_stride_h,
                                              input_stride_b, input_stride_h, input_stride_w);
    } else {
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }
    return INFINI_STATUS_SUCCESS;
}

infiniStatus_t Descriptor::calculate(void *workspace, size_t workspace_size,
                                     void *output,
                                     const void *input,
                                     void *stream_) const {
    hcStream_t stream = (hcStream_t)stream_;
    if (_opaque->internal->maxThreadsPerBlock() == METAX_BLOCK_SIZE_1024) {
        CHECK_STATUS(launchKernel<METAX_BLOCK_SIZE_1024>(
            output, input, _info.dtype, _info.shape[0], _info.shape[1], _info.shape[2],
            _info.output_strides[0], _info.output_strides[1], _info.input_strides[0], _info.input_strides[1], _info.input_strides[2], stream));
    } else if (_opaque->internal->maxThreadsPerBlock() == METAX_BLOCK_SIZE_512) {
        CHECK_STATUS(launchKernel<METAX_BLOCK_SIZE_512>(
            output, input, _info.dtype, _info.shape[0], _info.shape[1], _info.shape[2],
            _info.output_strides[0], _info.output_strides[1], _info.input_strides[0], _info.input_strides[1], _info.input_strides[2], stream));
    } else {
        return INFINI_STATUS_DEVICE_ARCHITECTURE_NOT_SUPPORTED;
    }
    return INFINI_STATUS_SUCCESS;
}

} // namespace op::reduce_max::metax